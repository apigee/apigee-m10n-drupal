<?php
/**
 * @file
 * Copyright 2018 Google Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\commerce_product\Entity\ProductType;

/**
 * When an order item is created, we need to check to see if the product is a
 * top up item. If it is, we should store a reference to the developer that we
 * are topping up so it can be used to credit the appropriate account.
 *
 * Implements hook_ENTITY_TYPE_create().
 */
function apigee_m10n_top_up_commerce_order_item_create(\Drupal\Core\Entity\EntityInterface $entity) {
  /** @var \Drupal\commerce_order\Entity\OrderItemInterface $entity */
  /** @var \Drupal\commerce_product\Entity\ProductVariationInterface $variant */
  // Check to see if a top up product is what's being added.
  if ($entity instanceof \Drupal\commerce_order\Entity\OrderItemInterface
    && ($variant = $entity->getPurchasedEntity())
    && ($product = $variant->getProduct())
    && !empty($product->apigee_top_up_enabled->value)
  ) {
    // Save the current user as the top up recipient. We might need to change
    // how this works when topping up a company or a non-current user.
    $entity->setData('top_up_account', \Drupal::currentUser()->getEmail());
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function apigee_m10n_top_up_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'commerce_product') {
    // The base field needs to be added to all product types for the storage to be
    // allocated but the option to enable will be hidden and unused unless enabled
    // for that bundle.
    $fields['apigee_top_up_enabled'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('This is an Apigee top up product.'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDefaultValue(FALSE);

    return $fields;
  }
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function apigee_m10n_top_up_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  // Make sure we are dealing with a product bundle that has Apigee top up enabled.
  if ($entity_type->id() === 'commerce_product'
    && ($prooduct_type = ProductType::load($bundle))
    && $prooduct_type->getThirdPartySetting('apigee_m10n_top_up', 'apigee_m10n_enable_top_up')
  ) {
    // Apigee top up enabled products will automatically update a developer's
    // balance upon payment completion. This adds a base field to the bundle to
    // allow top up to be enabled for products of the bundle individually.
    $top_up_base_def = clone $base_field_definitions['apigee_top_up_enabled'];
    $top_up_base_def
      ->setDefaultValue(TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);
    return ['apigee_top_up_enabled' => $top_up_base_def];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function apigee_m10n_top_up_form_commerce_product_type_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\commerce_product\Entity\ProductTypeInterface $product_type */
  $default_value = (($product_type = $form_state->getFormObject()->getEntity())
    && $product_type->getThirdPartySetting('apigee_m10n_top_up', 'apigee_m10n_enable_top_up')
  ) ? TRUE : FALSE;

  // Add an option to allow enabling Apigee top up for a product type.
  $form['apigee_m10n_enable_top_up'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable Apigee Monetization top up for this product type.'),
    '#default_value' => $default_value,
  ];
  // Add our own callback so we can save the top up enabled setting.
  array_splice($form["actions"]["submit"]["#submit"], -1, 0, 'apigee_m10n_top_up_form_commerce_product_type_submit');
}

/**
 * Add a third party setting to the product type to flag whether or not this
 * product type is should be used as an apigee to up product.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function apigee_m10n_top_up_form_commerce_product_type_submit(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\commerce_product\Entity\ProductTypeInterface $product_type */
  if (($product_type = $form_state->getFormObject()->getEntity())) {
    // Save the enabled setting to third party settings.
    $product_type->setThirdPartySetting(
      'apigee_m10n_top_up',
      'apigee_m10n_enable_top_up',
      $form_state->getValue('apigee_m10n_enable_top_up')
    );
  }
}
