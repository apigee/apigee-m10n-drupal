<?php

/**
 * @file
 * Copyright 2018 Google Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

use Drupal\commerce_checkout\Plugin\Commerce\CheckoutFlow\CheckoutFlowBase;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_mail().
 */
function apigee_m10n_add_credit_mail($key, &$message, $params) {
  apigee_m10n_add_credit_service()->mail($key, $message, $params);
}

/**
 * Implements hook_ENTITY_TYPE_create().
 */
function apigee_m10n_add_credit_commerce_order_item_create(EntityInterface $entity) {
  apigee_m10n_add_credit_service()->commerceOrderItemCreate($entity);
}

/**
 * Implements hook_entity_base_field_info().
 */
function apigee_m10n_add_credit_entity_base_field_info(EntityTypeInterface $entity_type) {
  return apigee_m10n_add_credit_service()->entityBaseFieldInfo($entity_type);
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function apigee_m10n_add_credit_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  return apigee_m10n_add_credit_service()->entityBundleFieldInfo($entity_type, $bundle, $base_field_definitions);
}

/**
 * Implements hook_form_alter().
 */
function apigee_m10n_add_credit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (($flow = $form_state->getFormObject())
    && ($flow instanceof CheckoutFlowBase)
    && ($form['#step_id'] == 'review')
  ) {
    // Add a custom validation handler to check for add credit products.
    array_unshift($form['#validate'], 'apigee_m10n_add_credit_checkout_form_review_validate');
  }
}

/**
 * Validation callback for the checkout pane form.
 */
function apigee_m10n_add_credit_checkout_form_review_validate(array $form, FormStateInterface $form_state) {
  if ($flow = $form_state->getFormObject()) {
    // Loop through all order items.
    // Find the add_credit products and the total amount per currency.
    /** @var \Drupal\commerce_order\Entity\OrderItemInterface $item */
    $add_credit_totals = [];
    foreach ($flow->getOrder()->getItems() as $item) {
      /** @var \Drupal\commerce_product\Entity\ProductInterface $product */
      if (($product = $item->getPurchasedEntity()->getProduct())
        && ($product->hasField('apigee_add_credit_enabled'))
        && ($product->get('apigee_add_credit_enabled')->value)) {
        // Use the total price since this factors in the quantity.
        $price = $item->getTotalPrice();
        $currency_code = strtolower($price->getCurrencyCode());
        $add_credit_totals[$currency_code] = !empty($add_credit_totals[$currency_code]) ? $add_credit_totals[$currency_code]->add($price) : $price;
      }
    }

    if (count($add_credit_totals)) {
      /** @var \Apigee\Edge\Api\Monetization\Entity\SupportedCurrencyInterface[] $supported_currencies */
      $supported_currencies = Drupal::service('apigee_m10n.monetization')
        ->getSupportedCurrencies();

      // Validate the total for each currency agains the minimum top up amount.
      foreach ($add_credit_totals as $currency_code => $add_credit_total) {
        if (isset($supported_currencies[$currency_code])) {
          if (($supported_currency = $supported_currencies[$currency_code])
            && ($minimum_top_up_amount = $supported_currency->getMinimumTopUpAmount())
            && ((float) $add_credit_total->getNumber() < $minimum_top_up_amount)) {
            $form_state->setErrorByName('review', t('The minimum top up amount for @currency_code is @amount.', [
              '@currency_code' => $supported_currency->getName(),
              '@amount' => Drupal::service('commerce_price.currency_formatter')->format($minimum_top_up_amount, $supported_currency->getName(), [
                'currency_display' => 'code',
              ]),
            ]));
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function apigee_m10n_add_credit_form_commerce_product_type_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  apigee_m10n_add_credit_service()->formCommerceProductTypeEditFormAlter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function apigee_m10n_add_credit_form_commerce_product_type_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  apigee_m10n_add_credit_service()->formCommerceProductTypeEditFormAlter($form, $form_state, $form_id);
}

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 */
function apigee_m10n_add_credit_inline_entity_form_table_fields_alter(&$fields, $context) {
  apigee_m10n_add_credit_service()->inlineEntityFormTableFieldsAlter($fields, $context);
}

/**
 * Implements hook_entity_type_alter().
 */
function apigee_m10n_add_credit_entity_type_alter(array &$entity_types) {
  apigee_m10n_add_credit_service()->entityTypeAlter($entity_types);
}

/**
 * Implements hook_field_info_alter().
 */
function apigee_m10n_add_credit_field_info_alter(&$info) {
  apigee_m10n_add_credit_service()->fieldInfoAlter($info);
}

/**
 * Implements hook_field_widget_form_alter().
 */
function apigee_m10n_add_credit_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  apigee_m10n_add_credit_service()->fieldWidgetFormAlter($element, $form_state, $context);
}

/**
 * Helper to get the `apigee_m10n.add_credit` service.
 *
 * @return \Drupal\apigee_m10n_add_credit\AddCreditServiceInterface
 *   The `apigee_m10n.add_credit` service.
 */
function apigee_m10n_add_credit_service() {
  // Use static caching for performance.
  static $service;
  $service = $service ?: \Drupal::service('apigee_m10n.add_credit');

  return $service;
}
