<?php/* * Copyright 2018 Google Inc. * * This program is free software; you can redistribute it and/or modify it under * the terms of the GNU General Public License version 2 as published by the * Free Software Foundation. * * This program is distributed in the hope that it will be useful, but WITHOUT * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public * License for more details. * * You should have received a copy of the GNU General Public License along * with this program; if not, write to the Free Software Foundation, Inc., 51 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. */namespace Drupal\apigee_m10n\Entity\Form;use Drupal\Core\Entity\EntityForm;use Drupal\Core\Entity\EntityInterface;use Drupal\Core\Form\FormStateInterface;use Drupal\Core\Routing\RouteMatchInterface;use Symfony\Component\DependencyInjection\ContainerInterface;use Drupal\user\Entity\User;use Drupal\apigee_m10n\Entity\Subscription;/** * Unsubscribe entity form for subscriptions. */class RatePlanSubscribeForm extends EntityForm {  /** @var mixed|null  */  protected $package_id;  /** @var EntityInterface|User|null */  protected $developer;  /** @var mixed|null  */  protected $rate_plan;  /**   * Class constructor.   */  public function __construct(RouteMatchInterface $route_match) {    $this->package_id = $route_match->getParameter('package');    $this->developer = User::load($route_match->getParameter('user'));    $this->rate_plan = $route_match->getParameter('rate_plan');  }  /**   * {@inheritdoc}   */  public static function create(ContainerInterface $container) {    return new static(      $container->get('current_route_match')    );  }  /**   * Provides a generic title callback for a single entity.   *   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match   *   The route match.   * @param \Drupal\Core\Entity\EntityInterface $_entity   *   (optional) An entity, passed in directly from the request attributes.   *   * @return string|null   *   The title for the entity view page, if an entity was found.   *   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException   */  public function title(RouteMatchInterface $route_match, EntityInterface $_entity = NULL) {    return $this->t("Subscribe to %label", ['%label' => $this->rate_plan->label()]);  }  /**   * {@inheritdoc}   */  public function buildForm(array $form, FormStateInterface $form_state) {    $form = parent::buildForm($form, $form_state);    // @TODO: add `End This Plan` option when current subscription is already active.    // @TODO: Show plan details, including package information.    $subscription = $this->getCurrentSubscribedPlan();    if ($subscription->isSubscriptionActive()) {      $form['endDate'] = [        '#type'  => 'date',        '#title' => $this->t('Start Date'),      ];      $form['actions']['submit']['#value'] = $this->t('End This Plan');    }    else {      $form['startDate'] = [        '#type'  => 'date',        '#title' => $this->t('Start Date'),      ];      $form['actions']['submit']['#value'] = $this->t('Purchase This Plan');    }    return $form;  }  /**   * {@inheritdoc}   */  public function submitForm(array &$form, FormStateInterface $form_state) {    // Remove button and internal Form API values from submitted values.    $form_state->cleanValues();    $this->entity = $this->buildEntity($form, $form_state);  }  /**   * {@inheritdoc}   */  public function save(array $form, FormStateInterface $form_state) {    return parent::save($form, $form_state);  }  /**   * {@inheritdoc}   */  public function buildEntity(array $form, FormStateInterface $form_state) {    $values = $form_state->getValues();    if (!empty($values['startDate'])) {      $entity = Subscription::create([        'startDate' => new \DateTimeImmutable($values['startDate']),        'ratePlan' => $this->rate_plan      ]);    }    else {      if ($entity = getCurrentSubscribedPlan()) {        // @TODO ensure that this end date is relative to the organization's timezone.        $entity->setEndDate(new \DateTimeImmutable('-1 day'));      }    }    $entity->setDeveloperEmail($this->developer->getEmail());    return $entity;  }  protected function getCurrentSubscribedPlan() {    $subscriptions = \Drupal::entityTypeManager('subscription')      ->getStorage('subscription')      ->loadByDeveloperId($this->developer->getEmail());    $plan_id = $this->rate_plan->id();    $subscription = array_filter($subscriptions, function($subscription) use ($plan_id) {      $id = $subscription->getRatePlan()->id();      if ($id === $plan_id){        return $subscription;      }    });    return array_pop($subscription);  }}