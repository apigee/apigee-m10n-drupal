# Default configuration file for Drupal modules.
#
# Use setup.sh to automate setting this up. Otherwise, to use this in a new
# module:
#   1. Copy config.yml to the module's .circleci directory.
#   2. Change 'latest' in the image tag to the latest tag.
#   3. Update the working_directory key.
#   4. Connect CircleCI to the repository through the Circle UI.
#   5. Set the COMPOSER_AUTH environment variable in Circle to grant access to
#      any private repositories.
#   6. Create a status badge embed code in Circle and add it to the README.md.
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#

version: 2.1

defaults: &defaults
  docker:
    # specify the version you desire here (avoid latest except for testing)
    - image: quay.io/deviantintegral/drupal_tests:0.5.0-drupal87

    - image: selenium/standalone-chrome-debug:3.14.0-beryllium

    - image: mariadb:10.4
      environment:
        MYSQL_ALLOW_EMPTY_PASSWORD: 1

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/mysql:9.4

  # 'checkout' supports a path key, but not on locals where you test with the
  # circleci CLI tool.
  # https://discuss.circleci.com/t/bug-circleci-build-command-ignores-checkout-path-config/13004
  working_directory: /var/www/html/modules/apigee_m10n

  parameters:
    core-version:
      type: integer
      default: 8
    instance-type:
      type: string

# YAML does not support merging of lists. That means we can't have a default
# 'steps' configuration, though we can have defaults for individual step
# properties.

# We use the composer.json as a way to determine if we can cache our build.
restore_cache: &restore_cache
  keys:
  - v4-dependencies-{{ checksum "composer.json" }}-{{ checksum "../../composer.json" }}
  # fallback to using the latest cache if no exact match is found
  - v4-dependencies-

# If composer.json hasn't changed, restore the Composer cache directory. We
# don't restore the lock file so we ensure we get updated dependencies.
save_cache: &save_cache
  paths:
    - /root/.composer/cache/files
  key: v4-dependencies-{{ checksum "composer.json" }}-{{ checksum "../../composer.json" }}

# Install composer dependencies into the workspace to share with all jobs.
# Core patch is installed manually since composer is using `replace:drupal/core` and root packages can't be patched with
# composer patches.
update_dependencies: &update_dependencies
  <<: *defaults

  steps:
    - print:
        message: Using Drupal core version << parameters.core-version >>

    - checkout

    - restore_cache: *restore_cache

    - run:
        name: "Setup environment variables for HYBRID instance type"
        working_directory: /var/www/html
        command: |
          INSTANCE_TYPE=<< parameters.instance-type >>;
          if [[ $INSTANCE_TYPE = "apigeex" ]]; then echo 'export APIGEE_EDGE_INSTANCE_TYPE=hybrid' >> $BASH_ENV; fi
          if [[ $INSTANCE_TYPE = "apigeex" ]]; then echo 'export APIGEE_EDGE_ORGANIZATION=$APIGEE_EDGE_HYBRID_ORGANIZATION' >> $BASH_ENV; fi
          if [[ $INSTANCE_TYPE = "apigeex" ]]; then echo 'export APIGEE_EDGE_ENDPOINT=$APIGEE_EDGE_HYBRID_ENDPOINT' >> $BASH_ENV; fi

    - run:
        working_directory: /var/www/html
        command: modules/apigee_m10n/.circleci/update-dependencies.sh apigee_m10n << parameters.core-version >> << parameters.instance-type >>

    - save_cache: *save_cache

    - persist_to_workspace:
        root: /var/www/html
        paths:
          - .

    - store_artifacts:
        path: /tmp/artifacts

# Run Drupal unit and kernel tests as one job. This command invokes the test.sh
# hook.
unit_kernel_tests: &unit_kernel_tests
  <<: *defaults
  steps:
    - run: rm -rf /var/www/html/core

    - attach_workspace:
        at: /var/www/html

    - checkout

    - run:
        name: "Setup environment variables for HYBRID instance type"
        working_directory: /var/www/html
        command: |
          INSTANCE_TYPE=<< parameters.instance-type >>;
          if [[ $INSTANCE_TYPE = "apigeex" ]]; then echo 'export APIGEE_EDGE_INSTANCE_TYPE=hybrid' >> $BASH_ENV; fi
          if [[ $INSTANCE_TYPE = "apigeex" ]]; then echo 'export APIGEE_EDGE_ORGANIZATION=$APIGEE_EDGE_HYBRID_ORGANIZATION' >> $BASH_ENV; fi
          if [[ $INSTANCE_TYPE = "apigeex" ]]; then echo 'export APIGEE_EDGE_ENDPOINT=$APIGEE_EDGE_HYBRID_ENDPOINT' >> $BASH_ENV; fi

    - run:
        working_directory: /var/www/html
        command: &unit_kernel_tests_command |
          cp ./modules/apigee_m10n/.circleci/test.sh /var/www/html
          modules/apigee_m10n/.circleci/update-dependencies.sh apigee_m10n  << parameters.core-version >> << parameters.instance-type >>
          ./test.sh apigee_m10n  << parameters.core-version >> << parameters.instance-type >>

    - store_test_results:
        path: /tmp/artifacts/phpunit
    - store_artifacts:
        path: /tmp/artifacts

# Run Drupal functional tests. This command invokes the test-functional.sh
# hook.
functional_tests: &functional_tests
  <<: *defaults
  steps:
    - run: rm -rf /var/www/html/core

    - attach_workspace:
        at: /var/www/html

    - checkout

    - run:
        name: "Setup environment variables for HYBRID instance type"
        working_directory: /var/www/html
        command: |
          INSTANCE_TYPE=<< parameters.instance-type >>;
          if [[ $INSTANCE_TYPE = "apigeex" ]]; then echo 'export APIGEE_EDGE_INSTANCE_TYPE=hybrid' >> $BASH_ENV; fi
          if [[ $INSTANCE_TYPE = "apigeex" ]]; then echo 'export APIGEE_EDGE_ORGANIZATION=$APIGEE_EDGE_HYBRID_ORGANIZATION' >> $BASH_ENV; fi
          if [[ $INSTANCE_TYPE = "apigeex" ]]; then echo 'export APIGEE_EDGE_ENDPOINT=$APIGEE_EDGE_HYBRID_ENDPOINT' >> $BASH_ENV; fi

    - run:
        working_directory: /var/www/html
        command: &functional_tests_command |
          cp ./modules/apigee_m10n/.circleci/test-functional.sh /var/www/html
          modules/apigee_m10n/.circleci/update-dependencies.sh apigee_m10n << parameters.core-version >> << parameters.instance-type >>
          ./test-functional.sh apigee_m10n  << parameters.core-version >> << parameters.instance-type >>

    - store_test_results:
        path: /tmp/artifacts/phpunit
    - store_artifacts:
        path: /tmp/artifacts

# Run Drupal functional tests. This command invokes the test-functional-js.sh
# hook.
functional_js_tests: &functional_js_tests
  <<: *defaults
  steps:
    - run: rm -rf /var/www/html/core

    - attach_workspace:
        at: /var/www/html

    - checkout

    - run:
        name: "Setup environment variables for HYBRID instance type"
        working_directory: /var/www/html
        command: |
          INSTANCE_TYPE=<< parameters.instance-type >>;
          if [[ $INSTANCE_TYPE = "apigeex" ]]; then echo 'export APIGEE_EDGE_INSTANCE_TYPE=hybrid' >> $BASH_ENV; fi
          if [[ $INSTANCE_TYPE = "apigeex" ]]; then echo 'export APIGEE_EDGE_ORGANIZATION=$APIGEE_EDGE_HYBRID_ORGANIZATION' >> $BASH_ENV; fi
          if [[ $INSTANCE_TYPE = "apigeex" ]]; then echo 'export APIGEE_EDGE_ENDPOINT=$APIGEE_EDGE_HYBRID_ENDPOINT' >> $BASH_ENV; fi

    - run:
        working_directory: /var/www/html
        command: &functional_js_tests_command |
          cp ./modules/apigee_m10n/.circleci/test-functional-js.sh /var/www/html
          modules/apigee_m10n/.circleci/update-dependencies.sh apigee_m10n << parameters.core-version >> << parameters.instance-type >>
          ./test-functional-js.sh apigee_m10n  << parameters.core-version >> << parameters.instance-type >>

    - store_test_results:
        path: /tmp/artifacts/phpunit
    - store_artifacts:
        path: /tmp/artifacts

# Run code quality tests. This invokes code-sniffer.sh.
code_sniffer: &code_sniffer
  <<: *defaults
  steps:
    - attach_workspace:
        at: /var/www/html

    - checkout

    - run:
        working_directory: /var/www/html
        command: &code_sniffer_command |
          cp ./modules/apigee_m10n/.circleci/code-sniffer.sh /var/www/html
          ./code-sniffer.sh apigee_m10n 8

    - store_test_results:
        path: /var/www/html/artifacts/phpcs
    - store_artifacts:
        path: /var/www/html/artifacts

# Run code coverage tests. This invokes code-coverage-stats.sh.
code_coverage: &code_coverage
  <<: *defaults
  steps:
    - attach_workspace:
        at: /var/www/html

    - checkout

    - run:
        working_directory: /var/www/html
        command: |
          sudo sed -i 's/^;zend_extension/zend_extension/g' /usr/local/etc/php/conf.d/xdebug.ini
          modules/apigee_m10n/.circleci/update-dependencies.sh apigee_m10n 8
          ./code-coverage-stats.sh apigee_m10n 8
    - store_artifacts:
        path: /var/www/html/artifacts

# Run D9 deprecation checks.
d9_check: &d9_check
  <<: *defaults
  steps:
    - attach_workspace:
        at: /var/www/html

    - checkout

    - run:
        working_directory: /var/www/html
        command: |
          ./d9.sh apigee_m10n 8

    - store_test_results:
        path: /var/www/html/artifacts/d9
    - store_artifacts:
        path: /var/www/html/artifacts/d9

# Run all tests.
all_tests: &all_tests
  <<: *defaults
  steps:
    - attach_workspace:
        at: /var/www/html

    - checkout

    - run:
        working_directory: /var/www/html
        command: *code_sniffer_command
    - run:
        working_directory: /var/www/html
        command: *unit_kernel_tests_command
    - run:
        working_directory: /var/www/html
        command: *functional_tests_command
    - run:
        working_directory: /var/www/html
        command: *functional_js_tests_command

    - store_artifacts:
        path: /tmp/artifacts

commands:
  print:
    parameters:
      message:
        type: string
    steps:
      - run: echo << parameters.message >>

# Declare all of the jobs we should run.
jobs:
  update-dependencies:
     <<: *update_dependencies
  run-unit-kernel-tests:
     <<: *unit_kernel_tests
  run-functional-tests:
     <<: *functional_tests
  run-functional-js-tests:
     <<: *functional_js_tests
  run-all-tests:
    <<: *all_tests
  run-code-sniffer:
     <<: *code_sniffer
  run-code-coverage:
     <<: *code_coverage
  run-d9-check:
    <<: *d9_check

workflows:
  version: 2

  # Declare a workflow that runs all of our jobs in parallel.
  test_and_lint:
    jobs:
      - update-dependencies:
          name: update-dependencies-<< matrix.core-version >> << matrix.instance-type >>
          matrix:
            parameters:
              core-version: [ 8, 9 ]
              instance-type: [ edge, apigeex ]
      - run-unit-kernel-tests:
          name: run-unit-kernel-tests-<< matrix.core-version >> << matrix.instance-type >>
          matrix:
            parameters:
              core-version: [ 8, 9 ]
              instance-type: [ edge, apigeex ]
          requires:
            - update-dependencies-<< matrix.core-version >> << matrix.instance-type >>
      - run-functional-tests:
          name: run-functional-tests-<< matrix.core-version >> << matrix.instance-type >>
          matrix:
            parameters:
              core-version: [ 8, 9 ]
              instance-type: [ edge, apigeex ]
          requires:
            - update-dependencies-<< matrix.core-version >> << matrix.instance-type >>
      - run-functional-js-tests:
          name: run-functional-js-tests-<< matrix.core-version >> << matrix.instance-type >>
          matrix:
            parameters:
              core-version: [ 8, 9 ]
              instance-type: [ edge, apigeex ]
          requires:
            - update-dependencies-<< matrix.core-version >> << matrix.instance-type >>
      - run-code-sniffer:
          name: run-code-sniffer
          matrix:
            parameters:
              instance-type: [ edge ]
          requires:
            - update-dependencies-8 << matrix.instance-type >>
      - run-d9-check:
          name: run-d9-check
          matrix:
            parameters:
              instance-type: [ edge ]
          requires:
            - update-dependencies-8 << matrix.instance-type >>
      - run-code-coverage:
          name: run-code-coverage
          matrix:
            parameters:
              instance-type: [ edge ]
          requires:
            - update-dependencies-8 << matrix.instance-type >>
            - run-unit-kernel-tests-8 << matrix.instance-type >>
